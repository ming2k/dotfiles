// This config is in the KDL format: https://kdl.dev
// "/-" comments out the following node.
// Check the wiki for a full description of the configuration:
// https://yalter.github.io/niri/Configuration:-Introduction

// Input device configuration.
// Find the full list of options on the wiki:
// https://yalter.github.io/niri/Configuration:-Input
input {
  keyboard {
    xkb {
      layout "us"
    }

    repeat-delay 300
    repeat-rate 60
  }

  touchpad {
    tap
    natural-scroll
  }

  mouse {
    // off
    // natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "no-scroll"
  }

  trackpoint {
    // off
    // natural-scroll
    // accel-speed 0.2
    // accel-profile "flat"
    // scroll-method "on-button-down"
    // scroll-button 273
    // scroll-button-lock
    // middle-emulation
  }

  // Uncomment this to make the mouse warp to the center of newly focused windows.
  // warp-mouse-to-focus

  // Focus windows and outputs automatically when moving the mouse into them.
  // Setting max-scroll-amount="0%" makes it work only on windows already fully on screen.
  // focus-follows-mouse max-scroll-amount="0%"
}

// You can configure outputs by their name, which you can find
// by running `niri msg outputs` while inside a niri instance.
// The built-in laptop monitor is usually called "eDP-1".
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Outputs
// Remember to uncomment the node by removing "/-"!
output "eDP-1" {
  mode "3072x1920@120.000"
  scale 2.0
  position x=0 y=0
  background-color "#003300"
  backdrop-color "#001100"
}

// Settings that influence how windows are positioned and sized.
// Find more information on the wiki:
// https://yalter.github.io/niri/Configuration:-Layout
layout {
  gaps 0

  center-focused-column "always"

  preset-column-widths {
    proportion 0.5
    proportion 0.6
    proportion 0.7
  }

  default-column-width { proportion 0.5; }

  // By default focus ring and border are rendered as a solid background rectangle
  // behind windows. That is, they will show up through semitransparent windows.
  // This is because windows using client-side decorations can have an arbitrary shape.
  //
  // If you don't like that, you should uncomment `prefer-no-csd` below.
  // Niri will draw focus ring and border *around* windows that agree to omit their
  // client-side decorations.
  //
  // Alternatively, you can override it with a window rule called
  // `draw-border-with-background`.

  focus-ring {
    width 4
    active-color "#87AFDF"
    inactive-color "#505050"
  }

  // You can also add a border. It's similar to the focus ring, but always visible.
  border {
    // The settings are the same as for the focus ring.
    // If you enable the border, you probably want to disable the focus ring.
    off

    width 4
    active-color "#ffc87f"
    inactive-color "#505050"

    // Color of the border around windows that request your attention.
    urgent-color "#9b0000"

    // Gradients can use a few different interpolation color spaces.
    // For example, this is a pastel rainbow gradient via in="oklch longer hue".
    //
    // active-gradient from="#e5989b" to="#ffb4a2" angle=45 relative-to="workspace-view" in="oklch longer hue"

    // inactive-gradient from="#505050" to="#808080" angle=45 relative-to="workspace-view"
  }

  // You can enable drop shadows for windows.
  shadow {
    // Uncomment the next line to enable shadows.
    // on

    // By default, the shadow draws only around its window, and not behind it.
    // Uncomment this setting to make the shadow draw behind its window.
    //
    // Note that niri has no way of knowing about the CSD window corner
    // radius. It has to assume that windows have square corners, leading to
    // shadow artifacts inside the CSD rounded corners. This setting fixes
    // those artifacts.
    //
    // However, instead you may want to set prefer-no-csd and/or
    // geometry-corner-radius. Then, niri will know the corner radius and
    // draw the shadow correctly, without having to draw it behind the
    // window. These will also remove client-side shadows if the window
    // draws any.
    //
    // draw-behind-window true

    // You can change how shadows look. The values below are in logical
    // pixels and match the CSS box-shadow properties.

    // Softness controls the shadow blur radius.
    softness 30

    // Spread expands the shadow.
    spread 5

    // Offset moves the shadow relative to the window.
    offset x=0 y=5

    // You can also change the shadow color and opacity.
    color "#0007"
  }

  // Struts shrink the area occupied by windows, similarly to layer-shell panels.
  // You can think of them as a kind of outer gaps. They are set in logical pixels.
  // Left and right struts will cause the next window to the side to always be visible.
  // Top and bottom struts will simply add outer gaps in addition to the area occupied by
  // layer-shell panels and regular gaps.
  struts {
    // left 64
    // right 64
    // top 64
    // bottom 64
  }
}

// Add lines like this to spawn processes at startup.
// Note that running niri as a session supports xdg-desktop-autostart,
// which may be more convenient to use.
// See the binds section below for more spawn examples.

spawn-at-startup "sh" "-c" "dbus-update-activation-environment --systemd DISPLAY XDG_CURRENT_DESKTOP WAYLAND_DISPLAY"
spawn-at-startup "waybar" "-c" "/home/ming/.config/waybar/niri/config" "-s" "/home/ming/.config/waybar/niri/style.css"
spawn-at-startup "sh" "-c" "swww-daemon & swww img /home/ming/pictures/wallpapers/astronomy.png"
spawn-at-startup "sh" "-c" "fcitx -r -d"

hotkey-overlay {
  // Uncomment this line to disable the "Important Hotkeys" pop-up at startup.
  // skip-at-startup
}

// Dsiable Client-Side Decorations
prefer-no-csd

// You can change the path where screenshots are saved.
// A ~ at the front will be expanded to the home directory.
// The path is formatted with strftime(3) to give you the screenshot date and time.
screenshot-path "~/pictures/screenshots/screenshot-%Y%m%d-%H%M%S.png"

// You can also set this to null to disable saving screenshots to disk.
// screenshot-path null

// Animation settings.
// The wiki explains how to configure individual animations:
// https://yalter.github.io/niri/Configuration:-Animations
animations {
  // Uncomment to turn off all animations.
  // off

  // Slow down all animations by this factor. Values below 1 speed them up instead.
  // slowdown 3.0
}

// Example: enable rounded corners for all windows.
// (This example rule is commented out with a "/-" in front.)
/-window-rule {
  geometry-corner-radius 12
  clip-to-geometry true
}

binds {
  // Niri level
  Super+Shift+E           { quit; }
  Super+Q                 { close-window; }
  Super+F                 { fullscreen-window; }

  Super+Home              { focus-column-first; }
  Super+End               { focus-column-last; }

  // Workspace and layout
  Super+Left                          { focus-column-left; }
  Super+Right                         { focus-column-right; }
  Super+Down                          { focus-window-down; }
  Super+Up                            { focus-window-up; }
  Mod+WheelScrollDown cooldown-ms=150 { focus-workspace-down; }
  Mod+WheelScrollUp   cooldown-ms=150 { focus-workspace-up; }
  Mod+Shift+WheelScrollUp             { focus-column-left; }
  Mod+Shift+WheelScrollDown           { focus-column-right; }
  Mod+WheelScrollRight                { focus-column-right; }
  Mod+WheelScrollLeft                 { focus-column-left; }

  Super+Shift+Left        { set-column-width "-10%"; }
  Super+Shift+Right       { set-column-width "+10%"; }
  Super+Shift+Up          { set-window-height "+10%"; }
  Super+Shift+Down        { set-window-height "-10%"; }

  Super+W                 { switch-preset-column-width; }
  Super+H                 { switch-preset-window-height; }
  Super+T                 { toggle-window-floating; }
  Super+M                 { maximize-column; }
  Super+Ctrl+Left         { move-column-left; }
  Super+Ctrl+Right        { move-column-right; }
  Super+Ctrl+Down         { move-window-down; }
  Super+Ctrl+Up           { move-window-up; }
  Super+Ctrl+Home         { move-column-to-first; }
  Super+Ctrl+End          { move-column-to-last; }
  Super+BracketLeft       { consume-or-expel-window-left; }
  Super+BracketRight      { consume-or-expel-window-right; }
  Super+Comma             { consume-window-into-column; }
  Super+Period            { expel-window-from-column; }

  Super+1 { focus-workspace 1; }
  Super+2 { focus-workspace 2; }
  Super+3 { focus-workspace 3; }
  Super+4 { focus-workspace 4; }
  Super+5 { focus-workspace 5; }
  Super+Shift+1 { move-window-to-workspace 1; }
  Super+Shift+2 { move-window-to-workspace 2; }
  Super+Shift+3 { move-window-to-workspace 3; }
  Super+Shift+4 { move-window-to-workspace 4; }
  Super+Shift+5 { move-window-to-workspace 5; }

  Super+Alt+L { spawn "swaylock"; }
  Print { spawn "sh" "-c" "niri msg action screenshot | wl-copy"; }
  Ctrl+Print { screenshot-screen; }

  // Backlight and Audio
  XF86MonBrightnessUp   allow-when-locked=true { spawn "brightnessctl" "set" "+5%" ; }
  XF86MonBrightnessDown allow-when-locked=true { spawn "brightnessctl" "set" "5%-" ; }
  XF86AudioRaiseVolume  allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
  XF86AudioLowerVolume  allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
  XF86AudioMute         allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
  XF86AudioPlay         allow-when-locked=true { spawn "playerctl" "play-pause"; }
  XF86AudioPause        allow-when-locked=true { spawn "playerctl" "pause"; }
  XF86AudioNext         allow-when-locked=true { spawn "playerctl" "next"; }
  XF86AudioPrev         allow-when-locked=true { spawn "playerctl" "previous"; }

  // Application
  Super+A { spawn "wofi" "--show" "drun"; }
  Super+Return { spawn "alacritty"; }


}
